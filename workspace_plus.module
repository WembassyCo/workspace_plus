<?php

/**
 * @file
 * Workspace_plus.
 */

use Drupal\workspace_plus\EntityOperations;
use Drupal\Core\Form\FormStateInterface;
use Drupal\workspaces\WorkspaceInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\workspaces\FormOperations;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\workspace_plus\UserLoginEvent;
use Drupal\user\UserInterface;
use Drupal\Core\Url;
use Drupal\Component\Serialization\Json;

/**
 * Implements hook_module_implements_alter().
 */
function workspace_plus_module_implements_alter(&$implementations, $hook) {

  if ($hook == 'workspace_access') {
    // Move module's implementation of hook_page_top to the end of the list.
    unset($implementations['content_moderation']);
  }

  if (in_array($hook, ['form_alter',
    'entity_preload',
    'entity_presave',
    'entity_insert',
    'entity_update',
    'entity_predelete',
  ])) {
    unset($implementations['workspaces']);
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function workspace_plus_entity_type_alter(array &$entity_types) {
  $entity_types['workspace']->setFormClass('deploy', '\Drupal\workspace_plus\Form\WorkspaceDeployForm');
  $entity_types['workspace']->setHandlerClass('access', '\Drupal\workspace_plus\WorkspacePlusAccessControlHandler');
  $entity_types['workspace']->setHandlerClass('list_builder', '\Drupal\workspace_plus\WorkspacePlusListBuilder');
}

/**
 * Access funtion callback.
 */
function workspace_plus_workspace_access(WorkspaceInterface $workspace, $operation, AccountInterface $account) {
  if ($operation == 'publish') {
    return AccessResult::allowed();
  }
}

/**
 * Implements hook_form_alter().
 */
function workspace_plus_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id == 'workflow_state_add_form' || $form_id == 'workflow_state_edit_form') {
    $config = \Drupal::config('workspace_plus.settings');
    $current_route = \Drupal::routeMatch();
    $workflow = $current_route->getParameters()->get('workflow');
    $settings = $config->get($workflow->id());
    $form['actions']['submit']['#submit'][] = 'workspace_plus_save_deploy_settings';
    $form['type_settings']['workspace_deploy'] = [
      '#type' => 'checkbox',
      '#title' => t('Deploy to Live'),
      '#description' => t('Revisions in this state will be deployed to the Live workspace.'),
      '#weight' => -50,
      '#default_value' => isset($settings[$form['id']['#default_value']]) ? $settings[$form['id']['#default_value']] : 0,
    ];
  }

  if ($form_state->getFormObject() instanceof EntityFormInterface) {
    \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(EntityOperations::class)
      ->entityFormAlter($form, $form_state, $form_id);

    $manager = \Drupal::service('workspace_plus.manager');
    $entity = $form_state->getFormObject()->getEntity();
    if ($manager->isEntityTypeSupported($entity->getEntityType())) {
      $form_state->set('workspace_safe', TRUE);
    }
  }

  $form_state->set('workspace_safe', TRUE);
  if (strpos($form_id, 'layout') < 0) {
    \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(FormOperations::class)
      ->formAlter($form, $form_state, $form_id);
  }

  // Extend the Deployment form to provide more details about what items are deploying

  if ($form_id == 'workspace_deploy_form') {
    $service = \Drupal::service('workspaces.operation_factory');
    $entityTypeManager = \Drupal::entityTypeManager();
    $entityInfo = \Drupal::entityTypeManager()->getDefinitions();

    $route_match = \Drupal::routeMatch();
    $route = $route_match->getRouteObject();
    $parameters = $route->getOption('parameters');
    $workspace = $route_match->getParameter('workspace');
    $workspace_publisher = $service->getPublisher($workspace);
    $source_rev_diff = $workspace_publisher->getDifferringRevisionIdsOnSource();
    unset($form['deploy']);
    $total_count = $workspace_publisher->getNumberOfChangesOnSource();
    $form['deploy'] = [
      '#type' => 'fieldset',
      '#total_count' => $total_count
    ];

    foreach ($source_rev_diff as $entity_type_id => $revision_difference) {
      if(!isset($form['deploy'][$entity_type_id])) {
        $form['deploy'][$entity_type_id] = [
          '#theme' => 'item_list',
          '#title' => $entityInfo[$entity_type_id]->getLabel(),
          '#items' => [],
        ];
      }
      foreach($revision_difference as $vid => $nid) {
        $entity = $entityTypeManager->getStorage($entity_type_id)->load($nid);
        $form['deploy'][$entity_type_id]['#items'][] = $entity->toLink();
      }

    }


    // $form['schedule'] = [
    //   '#type' => 'datetime',
    //   '#title' => t('Schedule Deployment')
    // ];
    //
    // $form['actions']['schedule'] = [
    //   '#type' => 'submit',
    //   '#value' => t('Schedule %items items to deploy', ['%items' => $total_count]),
    //   '#weight' => -50,
    //   '#attributes' => [
    //     'class' => ['button--primary']
    //   ]
    // ];
    //
    // $form['actions']['submit']['#value'] = t('Deploy %items items to Live', [
    //   '%items' => $total_count
    // ]);
  }

  // Resolve issue with users seeing workspaces they should not have access to.
  if ($form_id == 'workspace_switcher_form') {

    $workspaces = $this->workspaceStorage->loadMultiple();
    $workspace_labels = [];
    foreach ($workspaces as $workspace) {
      if ($workspace->hasAccess()) {
        drupal_set_message('has access');
        $workspace_labels[$workspace->id()] = $workspace->label();
      }
    }
    $form['workspace_id']['#options'] = $workspace_labels;

  }

}

/**
 * Save settings to deploy content.
 */
function workspace_plus_save_deploy_settings($form, FormStateInterface &$form_state) {
  $values = $form_state->getValues();
  $config = \Drupal::service('config.factory')->getEditable('workspace_plus.settings');
  $current_route = \Drupal::routeMatch();
  $workflow = $current_route->getParameters()->get('workflow');
  $settings = $config->get($workflow->id());
  $settings[$values['id']] = $values['type_settings']['workspace_deploy'];
  $config->set($workflow->id(), $settings)->save();
}

/**
 * Implements hook_entity_preload().
 */
function workspace_plus_entity_preload(array $ids, $entity_type_id) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->entityPreload($ids, $entity_type_id);
}

/**
 * Implements hook_entity_presave().
 */
function workspace_plus_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'file') {
    return \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(EntityOperations::class)
      ->entityPresave($entity);
  }
}

/**
 * Implements hook_entity_access
 */
function workspace_plus_entity_access(EntityInterface $entity, $op, AccountInterface $account) {

  if ($entity->getEntityTypeId() == 'workspace' && ($op == 'view' || $op == 'update')) {
    // Allow if the user is editing, and allowed to edit or if the user is viewing and
    // allowed to view.

    $accessResult = AccessResult::allowedIf(
        $op == 'view' && $account->hasPermission("{$entity->id()} view") ||
        $op == 'update' && $account->hasPermission("{$entity->id()} edit")
    );

    return $accessResult;
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_insert().
 */
function workspace_plus_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'workspace') {
    \Drupal::service('workspaces.association')->workspaceInsert($entity);
    \Drupal::service('workspaces.repository')->resetCache();
  }
  if ($entity->getEntityTypeId() !== 'file') {
    return \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(EntityOperations::class)
      ->entityInsert($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function workspace_plus_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'workspace') {
    \Drupal::service('workspaces.repository')->resetCache();
  }
  if ($entity->getEntityTypeId() !== 'file') {
    return \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(EntityOperations::class)
      ->entityUpdate($entity);
  }
}

/**
 * Implements hook_entity_predelete().
 */
function workspace_plus_entity_predelete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'workspace') {
    \Drupal::service('workspaces.repository')->resetCache();
  }
  if ($entity->getEntityTypeId() !== 'file') {
    return \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(EntityOperations::class)
      ->entityPredelete($entity);
  }
}

/**
 * Implements hook_user_login().
 */
function workspace_plus_user_login(UserInterface $account) {
  $config = \Drupal::config('workspace_plus.settings');
  $live_workspace_access = empty($config->get('live_workspace_access')) ? ['administrator'] : $config->get('live_workspace_access');
  $login_user_roles = $account->getRoles();
  if (!array_intersect($live_workspace_access, $login_user_roles)) {
    /**
     * Activate stage workspace.
     *
     * @param \Drupal\user\UserInterface $account
     *   The user object on which the operation was just performed.
     */

    $workspace = new UserLoginEvent($account);
    if ($workspace->hasAccess()) {
      $workspace->setStageWorkspace();
    }
  }
}


/**
 * Implements hook_toolbar().
 * This is meant to overwrite the core workspace implementation to take into
 * account more dynamic permissions.
 */
function workspace_plus_toolbar() {
  $items['workspace'] = [
    '#cache' => [
      'contexts' => [
        'user.permissions',
      ],
    ],
  ];
  $current_user = \Drupal::currentUser();
  if (!$current_user->hasPermission('administer workspaces')
    && !$current_user->hasPermission('view own workspace')
    && !$current_user->hasPermission('view any workspace')
    && !$current_user->hasPermission('view workspace toolbar') ) {
    return $items;
  }

  /** @var \Drupal\workspaces\WorkspaceInterface $active_workspace */
  $active_workspace = \Drupal::service('workspaces.manager')->getActiveWorkspace();

  $items['workspace'] += [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => $active_workspace ? $active_workspace->label() : t('Live'),
      '#url' => Url::fromRoute('entity.workspace.collection', [], ['query' => \Drupal::destination()->getAsArray()]),
      '#attributes' => [
        'title' => t('Switch workspace'),
        'class' => ['use-ajax', 'toolbar-icon', 'toolbar-icon-workspace'],
        'data-dialog-type' => 'dialog',
        'data-dialog-renderer' => 'off_canvas_top',
        'data-dialog-options' => Json::encode([
          'height' => 161,
          'classes' => [
            'ui-dialog' => 'workspaces-dialog',
          ],
        ]),
      ],
      '#cache' => ['tags' => $active_workspace ? $active_workspace->getCacheTags() : []],
    ],
    '#wrapper_attributes' => [
      'class' => ['workspaces-toolbar-tab'],
    ],
    '#attached' => [
      'library' => ['workspaces/drupal.workspaces.toolbar'],
    ],
    '#weight' => 500,
  ];

  // Add a special class to the wrapper if we don't have an active workspace so
  // we can highlight it with a different color.
  if (!$active_workspace) {
    $items['workspace']['#wrapper_attributes']['class'][] = 'workspaces-toolbar-tab--is-default';
  }

  return $items;
}
